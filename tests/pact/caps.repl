
(begin-tx)

(env-data { "kall": ["a" "b" "c"], "kadmin": ["admin"] })
(define-keyset 'kall)
(define-keyset 'kadmin)

(env-keys ["admin"])

(module other GOV
  (defcap GOV () true)
  (defun enforce-a-guard (g) (enforce-guard g)))

(module caps 'kadmin

  (defschema guards g:guard)
  (deftable guard-table:{guards})

  (defschema int-row i:integer)
  (deftable ints:{int-row})
  (defschema ints-key k:string)

  (defschema yieldschema result:integer)

  (defcap GRANTED () true)

  (defcap KALL-CAP () (enforce-keyset 'kall))

  (defun with-kall ()
    (with-capability (KALL-CAP) 1))

  (defcap KEYSET-ID-CAP (id:string)
    (enforce-keyset id))

  (defun test-id-cap (id)
    (with-capability (KEYSET-ID-CAP id) (test-require id)))

  (defun test-require (id)
    (require-capability (KEYSET-ID-CAP id)) 1)

  (defun get-module-guard ()
    (create-module-guard "test"))

  (defun msg-keyset-user-guard (key:string)
    (create-user-guard (enforce-msg-keyset key)))

  (defun enforce-msg-keyset (key:string)
    (enforce-keyset (read-keyset key)))

  (defun create-bad-db-user-guard ()
    @doc "Creates a user guard which tries to read from the DB, which is not allowed. This will fail when the guard is enforced."
    ; this insert succeeds:
    (insert ints 'x {'i: 0})
    (create-user-guard (bad-user-guard-fun 'x)))

  (defun bad-user-guard-fun (x:string)
    (let ((row (read ints x)))
      (enforce (= 0 (at 'i row)) "int wasn't zero")))

  (defpact test-pact-guards (id:string)
    (step (step1 id))
    (step (step2 (read-msg "id"))))

  (defun step1 (id:string)
    (insert guard-table id { "g": (create-pact-guard "test")}))

  (defun step2:object{yieldschema} (id:string)
    (enforce-guard (get-guard id))
    { "result": 1 })

  (defun get-guard (id:string)
    (at 'g (read guard-table id)))

  (defcap COMPOSING-CAP ()
    (compose-capability (KALL-CAP)))

  (defun bad-compose-cap ()
    (compose-capability (KALL-CAP)))

  (defun test-compose-cap ()
    (with-capability (COMPOSING-CAP)
       (require-capability (KALL-CAP))))

  (defun test-granted ()
    (require-capability (GRANTED)))

  (defcap BAD_WITH_CAP ()
    (with-capability (GRANTED) true))

  (defun bad-with-cap ()
    (with-capability (BAD_WITH_CAP) true))

  (defun test-module-guard-other ()
    (other.enforce-a-guard (get-module-guard))
    "success")

  (defun bad-user-guard-compose ()
    (with-capability (BAD_USER_GUARD_COMPOSE) true))

  (defcap BAD_USER_GUARD_COMPOSE ()
    (enforce-guard (create-user-guard (bad-compose-cap))))

)

(create-table guard-table)
(create-table ints)

(commit-tx)

(begin-tx)
(module caps-shadow 'kadmin
  (defcap KEYSET-ID-CAP (id:string) true)
  (defun bad-shadow-granted (id)
    (with-capability (KEYSET-ID-CAP id)
                     (caps.test-require id))))
(commit-tx)

(typecheck 'caps)

(begin-tx)
(use caps)

(expect-failure "with-kall should fail w/o kall ks" (with-kall))

(env-keys ["a" "b" "c"])

(expect "with-kall succeeds with kall ks" 1 (with-kall))

(env-data { "k1": ["k1"], "k2": ["k2"] })
(define-keyset "k1")
(define-keyset "k2")

(expect-failure "cap k1 fails w/o key" (test-id-cap "k1"))
(expect-failure "cap k2 fails w/o key" (test-id-cap "k2"))

(env-keys ["k1"])
(expect "cap k1 succeeds" 1 (test-id-cap "k1"))
(expect-failure "direct call to test-require fails for k1"
                (require-capability (KEYSET-ID-CAP "k1")))
(expect-failure "cap k2 fails w/o key" (test-id-cap "k2"))

(env-keys ["k2"])
(expect-failure "cap k1 fails w/o key" (test-id-cap "k1"))
(expect-failure "direct call to test-require fails for k2"
                (require-capability (KEYSET-ID-CAP "k2")))
(expect "cap k2 succeeds" 1 (test-id-cap "k2"))

(expect-failure "top-level with-capability fails"
                (with-capability (KEYSET-ID-CAP "k2") 1))

(expect-failure "module guard fails w/o admin"
                (enforce-guard (get-module-guard)))

(env-keys ["admin","k2"])
(enforce-guard (get-module-guard))
(expect "top-level with-capability succeeds with module admin"
        1 (with-capability (KEYSET-ID-CAP "k2") 1))

(commit-tx)
(begin-tx)
(use caps)

(env-data { "k1": ["k1"], "k2": ["k2"], "k3" : ["k3"] })

(expect-failure
  "k3 fails ref guard construction when no keyset is defined"
  (keyset-ref-guard "k3"))

(define-keyset "k3" (read-keyset "k3"))

(expect
  "k3 succeeds now that a keyset is defined with that name"
  "'k3"
  (format "{}" [(keyset-ref-guard "k3")]))

(expect-failure
  "k3 cannot succeed since its keys are not in scope"
  (enforce-guard (keyset-ref-guard "k3")))

(env-keys ["k3"])

(expect
  "k3 succeeds now that keys are in scope"
  "true"
  (format "{}" [(enforce-guard (keyset-ref-guard "k3"))]))

(env-keys ["k1"])

(enforce-guard (msg-keyset-user-guard "k1"))
(expect-failure "user guard reading keyset k2 fails"
                (enforce-guard (msg-keyset-user-guard "k2")))

(enforce-guard (keyset-ref-guard "k1"))
(expect-failure "keyset ref guard k2"
                (enforce-guard (keyset-ref-guard "k2")))

(let ((bad-db-user-guard (create-bad-db-user-guard)))
  (expect-failure "reading db from within user guard" (enforce-guard bad-db-user-guard)))

(env-hash (hash "pact-guards-a-id")) ;; equivalent of pact-id
(test-pact-guards "a")

(pact-state true) ;; clears pact state
(let ((g (get-guard "a"))) ;; doing let so db failure doesn't confuse below
  (expect-failure "enforcing pact guard outside of pact" (enforce-guard g)))

(env-data { "id": "a"})

(expect "pact enforce succeeds" 1 (at 'result (continue-pact 1 false (hash "pact-guards-a-id"))))

(pact-state true)
(env-hash (hash "pact-guards-b-id"))
(test-pact-guards "b")
(expect-failure "pact enforce fails in pact 5 for id 'a'" (continue-pact 1 false (hash "pact-guards-b-id")))

(env-keys ["a" "b" "c"])
(expect-failure "cannot compose caps at toplevel" (compose-capability (KALL-CAP)))
(expect-failure "cannot compose caps in defun" (bad-compose-cap))
;compose test will validate that KALL-CAP was acquired
(test-compose-cap)
;now validate that KALL-CAP is gone
(expect-failure "KALL-CAP composed cap is revoked" (require-capability KALL-CAP))
; defuns requiring magic capabilities should not work
(expect-failure "functions requiring restricted governance should fail" (test-granted))
; bring magical capabilities into scope at repl scope
(test-capability (GRANTED))
; defuns requiring magic capabilities should now work
(expect "functions requiring restricted governance should succeed after 'test-capability'" true (test-granted))
(commit-tx)

(use caps)
; revocation now makes functions requiring certain caps to now fail
(expect-failure "functions requiring restricted governance should fail after revocation" (test-granted))

(expect-failure "nested with-capability fails" (bad-with-cap))

(expect-failure "shadowed cap fails" (caps-shadow.bad-shadow-granted "k1"))

(expect "success enforcing module guard in foreign module"
        "success"
        (test-module-guard-other))

(env-keys ["k1"])
(expect
 "success requiring a capability in user guard"
 true
 (enforce-guard (create-user-guard (test-id-cap "k1"))))

(expect-failure
 "failure creating a user guard with a defcap"
 (create-user-guard (KEYSET-ID-CAP "k1")))

(env-keys ["a" "b" "c"])
(expect-failure
 "user guard with compose fails"
 (bad-user-guard-compose))


;;
;; managed capability tests
;;

(begin-tx)

(module mgd-caps G
  "Exercise managed capability functionality"

  (defcap G () (enforce false "module admin disabled"))

  (defcap PAY (sender:string receiver:string amount:integer)
    @managed amount PAY-mgr
    (enforce-keyset (read-keyset sender)))

  (defun install-pay (sender:string receiver:string amount:integer)
    (install-capability (PAY sender receiver amount)))

  (defun PAY-mgr (mgd req)
    (let ((bal (- mgd req)))
      (enforce (> req 0) "requested amount > 0")
      (enforce (>= bal 0) (format "sufficient balance: {} {} {}" [bal req mgd]))
      bal))

  (defun pay (sender receiver amount)
    (with-capability (PAY sender receiver amount)
                     amount))

  )

(commit-tx)

(begin-tx)
(use mgd-caps)
(env-data { "alice": ["alice"] })

(expect-failure
 "keyset not in sigs"
 (install-pay "alice" "bob" 10))

(env-sigs [{ "key": "alice",
          "caps": [(PAY "alice" "bob" 10)
                  ,(PAY "alice" "carl" 1)] }] )

(expect-failure
 "Payment should fail with no cap installed"
 (pay "alice" "bob" 6))

(expect-failure
 "Failure on external install"
 (install-capability (PAY "alice" "bob" 10)))

(expect-failure
 "Failure on unmatched cap install"
 (install-pay "alice" "bob" 12))

(expect
 "Success on alice-bob cap install" "Installed capability"
 (install-pay "alice" "bob" 10))

(expect
 "Success on alice-carl cap install" "Installed capability"
 (install-pay "alice" "carl" 1))

(expect-failure
 "Payment should fail on different sender"
 (pay "dave" "bob" 6))

(expect-failure
 "Payment should fail on different receiver"
 (pay "alice" "dave" 6))

(expect-failure
 "Payment should fail with too-high balance"
 (pay "alice" "bob" 11))

(expect
 "Success on first pmt" 6
 (pay "alice" "bob" 6))

(expect-failure
 "2nd payment should fail with too-high balance"
 (pay "alice" "bob" 5))

(expect
 "Success on second pmt" 4
 (pay "alice" "bob" 4))

(expect-failure
 "3rd payment should fail with too-high balance"
 (pay "alice" "bob" 1))

(expect
 "Payment to carl succeeds" 1
 (pay "alice" "carl" 1))

(expect-failure
 "2nd payment to carl fails"
 (pay "alice" "bob" 1))

(expect-failure
 "reinstall of capability should fail"
 (install-pay "alice" "bob" 10))

(expect-failure
 "reinstall of capability should fail"
 (install-pay "alice" "carl" 1))


(commit-tx)

(begin-tx)

(interface mgd-iface
  (defcap C:bool (id:string) @managed id C-mgr)
  (defschema c-schema
    id:string)
  (defun C-mgr:string
      (m:string r:string))
  )
(env-keys ["a"])
(env-data { "a": ["a"] })
(define-keyset 'a (read-keyset 'a))
(module mgd-mod G
  (defcap G () true)
  (implements mgd-iface)
  (defcap C:bool (id:string) @managed id C-mgr
    (enforce-keyset id))
  (defun C-mgr:string
      (m:string r:string) m)

  (defcap D (allow:bool) @managed allow D-mgr (enforce allow "allowed"))
  (defun D-mgr (m r) m)
  (defun acquireD (allowed:bool) (with-capability (D allowed) true))
  )

(expect
 "can install cap specified in interface"
 "Installed capability"
 (install-capability (C "a")))

(expect-failure
 "D not acquirable without install"
 (acquireD true))

(expect-failure
 "test install enforces capability test"
 (test-capability (D false)))

(expect
 "test install succeeds"
 "Capability installed"
 (test-capability (D true)))

(expect
 "D acquirable post-install"
 true
 (acquireD true))
