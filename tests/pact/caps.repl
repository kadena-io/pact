
(begin-tx)
(env-exec-config ["DisablePact44"])

(env-data { "kall": ["a" "b" "c"], "kadmin": ["admin"] })
(define-keyset 'kall)
(define-keyset 'kadmin)

(env-keys ["admin"])

(module other GOV
  (defcap GOV () true)
  (defun enforce-a-guard (g) (enforce-guard g)))

(module caps 'kadmin

  (defschema guards g:guard)
  (deftable guard-table:{guards})

  (defschema int-row i:integer)
  (deftable ints:{int-row})
  (defschema ints-key k:string)

  (defschema yieldschema result:integer)

  (defcap GRANTED () true)

  (defcap KALL-CAP () (enforce-keyset 'kall))

  (defun with-kall ()
    (with-capability (KALL-CAP) 1))

  (defcap KEYSET-ID-CAP (id:string)
    (enforce-keyset id))

  (defun test-id-cap (id)
    (with-capability (KEYSET-ID-CAP id) (test-require id)))

  (defun test-require (id)
    (require-capability (KEYSET-ID-CAP id)) 1)

  (defun get-module-guard ()
    (create-module-guard "test"))

  (defun msg-keyset-user-guard (key:string)
    (create-user-guard (enforce-msg-keyset key)))

  (defun enforce-msg-keyset (key:string)
    (enforce-keyset (read-keyset key)))

  (defun create-bad-db-user-guard ()
    @doc "Creates a user guard which tries to read from the DB, which is not allowed. This will fail when the guard is enforced."
    ; this insert succeeds:
    (insert ints 'x {'i: 0})
    (create-user-guard (bad-user-guard-fun 'x)))

  (defun bad-user-guard-fun (x:string)
    (let ((row (read ints x)))
      (enforce (= 0 (at 'i row)) "int wasn't zero")))

  (defpact test-pact-guards (id:string)
    (step (step1 id))
    (step (step2 (read-msg "id"))))

  (defun step1 (id:string)
    (insert guard-table id { "g": (create-pact-guard "test")}))

  (defun step2:object{yieldschema} (id:string)
    (enforce-guard (get-guard id))
    { "result": 1 })

  (defun get-guard (id:string)
    (at 'g (read guard-table id)))

  (defcap COMPOSING-CAP ()
    (compose-capability (KALL-CAP)))

  (defun bad-compose-cap ()
    (compose-capability (KALL-CAP)))

  (defun test-compose-cap ()
    (with-capability (COMPOSING-CAP)
       (require-capability (KALL-CAP))))

  (defun test-granted ()
    (require-capability (GRANTED)))

  (defcap BAD_WITH_CAP ()
    (with-capability (GRANTED) true))

  (defun bad-with-cap ()
    (with-capability (BAD_WITH_CAP) true))

  (defun test-module-guard-other ()
    (other.enforce-a-guard (get-module-guard))
    "success")

  (defun bad-user-guard-compose ()
    (with-capability (BAD_USER_GUARD_COMPOSE) true))

  (defcap BAD_USER_GUARD_COMPOSE ()
    (enforce-guard (create-user-guard (bad-compose-cap))))

)

(create-table guard-table)
(create-table ints)

(commit-tx)

(begin-tx)
(module caps-shadow 'kadmin
  (defcap KEYSET-ID-CAP (id:string) true)
  (defun bad-shadow-granted (id)
    (with-capability (KEYSET-ID-CAP id)
                     (caps.test-require id))))
(commit-tx)

(typecheck 'caps)

(begin-tx)
(use caps)

(expect-failure "with-kall should fail w/o kall ks" (with-kall))

(env-keys ["a" "b" "c"])

(expect "with-kall succeeds with kall ks" 1 (with-kall))

(env-data { "k1": ["k1"], "k2": ["k2"] })
(define-keyset "k1")
(define-keyset "k2")

(expect-failure "cap k1 fails w/o key" (test-id-cap "k1"))
(expect-failure "cap k2 fails w/o key" (test-id-cap "k2"))

(env-keys ["k1"])
(expect "cap k1 succeeds" 1 (test-id-cap "k1"))
(expect-failure "direct call to test-require fails for k1"
                (require-capability (KEYSET-ID-CAP "k1")))
(expect-failure "cap k2 fails w/o key" (test-id-cap "k2"))

(env-keys ["k2"])
(expect-failure "cap k1 fails w/o key" (test-id-cap "k1"))
(expect-failure "direct call to test-require fails for k2"
                (require-capability (KEYSET-ID-CAP "k2")))
(expect "cap k2 succeeds" 1 (test-id-cap "k2"))

(expect-failure "top-level with-capability fails"
                (with-capability (KEYSET-ID-CAP "k2") 1))

(expect-failure "module guard fails w/o admin"
                (enforce-guard (get-module-guard)))

(env-keys ["admin","k2"])
(enforce-guard (get-module-guard))
(expect "top-level with-capability succeeds with module admin"
        1 (with-capability (KEYSET-ID-CAP "k2") 1))

(commit-tx)
(begin-tx)
(use caps)

(env-data { "k1": ["k1"], "k2": ["k2"], "k3" : ["k3"] })

(expect-failure
  "k3 fails ref guard construction when no keyset is defined"
  (keyset-ref-guard "k3"))

(define-keyset "k3" (read-keyset "k3"))

(expect
  "k3 succeeds now that a keyset is defined with that name"
  "'k3"
  (format "{}" [(keyset-ref-guard "k3")]))

(expect-failure
  "k3 cannot succeed since its keys are not in scope"
  (enforce-guard (keyset-ref-guard "k3")))

(env-keys ["k3"])

(expect
  "k3 succeeds now that keys are in scope"
  "true"
  (format "{}" [(enforce-guard (keyset-ref-guard "k3"))]))

(env-keys ["k1"])

(enforce-guard (msg-keyset-user-guard "k1"))
(expect-failure "user guard reading keyset k2 fails"
                (enforce-guard (msg-keyset-user-guard "k2")))

(enforce-guard (keyset-ref-guard "k1"))
(expect-failure "keyset ref guard k2"
                (enforce-guard (keyset-ref-guard "k2")))

(let ((bad-db-user-guard (create-bad-db-user-guard)))
  (expect-failure "reading db from within user guard" (enforce-guard bad-db-user-guard)))

(env-hash (hash "pact-guards-a-id")) ;; equivalent of pact-id
(test-pact-guards "a")

(pact-state true) ;; clears pact state
(let ((g (get-guard "a"))) ;; doing let so db failure doesn't confuse below
  (expect-failure "enforcing pact guard outside of pact" (enforce-guard g)))

(env-data { "id": "a"})

(expect "pact enforce succeeds" 1 (at 'result (continue-pact 1 false (hash "pact-guards-a-id"))))

(pact-state true)
(env-hash (hash "pact-guards-b-id"))
(test-pact-guards "b")
(expect-failure "pact enforce fails in pact 5 for id 'a'" (continue-pact 1 false (hash "pact-guards-b-id")))

(env-keys ["a" "b" "c"])
(expect-failure "cannot compose caps at toplevel" (compose-capability (KALL-CAP)))
(expect-failure "cannot compose caps in defun" (bad-compose-cap))
;compose test will validate that KALL-CAP was acquired
(test-compose-cap)
;now validate that KALL-CAP is gone
(expect-failure "KALL-CAP composed cap is revoked" (require-capability KALL-CAP))
; defuns requiring magic capabilities should not work
(expect-failure "functions requiring restricted governance should fail" (test-granted))
; bring magical capabilities into scope at repl scope
(test-capability (GRANTED))
; defuns requiring magic capabilities should now work
(expect "functions requiring restricted governance should succeed after 'test-capability'" true (test-granted))
(commit-tx)

(use caps)
; revocation now makes functions requiring certain caps to now fail
(expect-failure "functions requiring restricted governance should fail after revocation" (test-granted))

(expect-failure "nested with-capability fails" (bad-with-cap))

(expect-failure "shadowed cap fails" (caps-shadow.bad-shadow-granted "k1"))

(expect "success enforcing module guard in foreign module"
        "success"
        (test-module-guard-other))

(env-keys ["k1"])
(expect
 "success requiring a capability in user guard"
 true
 (enforce-guard (create-user-guard (test-id-cap "k1"))))

(expect-failure
 "failure creating a user guard with a defcap"
 (create-user-guard (KEYSET-ID-CAP "k1")))

(env-keys ["a" "b" "c"])
(expect-failure
 "user guard with compose fails"
 (bad-user-guard-compose))


;;
;; managed capability tests
;;

(begin-tx)

(module mgd-caps G
  "Exercise managed capability functionality"

  (defcap G () (enforce false "module admin disabled"))

  (defcap O () "dummy empty cap" true)

  (defcap PAY (sender:string receiver:string amount:integer)
    @managed amount PAY-mgr
    (enforce-keyset (read-keyset sender)))

  (defun PAY-mgr (mgd req)
    (let ((bal (- mgd req)))
      (enforce (> req 0) "requested amount > 0")
      (enforce (>= bal 0) (format "sufficient balance: {} {} {}" [bal req mgd]))
      bal))

  (defun pay (sender receiver amount)
    (with-capability (PAY sender receiver amount)
                     amount))

  (defcap PAY_ADMIN (receiver:string amount:integer)
    @managed amount PAY-mgr
    (enforce-guard (create-module-guard "foo")))

  (defun pay-admin (receiver:string amount:integer)
    (with-capability (PAY_ADMIN receiver amount) amount))
  )

(commit-tx)

(begin-tx)
(use mgd-caps)
(env-data { "alice": ["alice"] })

(env-keys ["alice"])

(expect-failure
 "cap not in sigs"
 (pay "alice" "bob" 10))

(env-sigs [{ "key": "alice",
          "caps": [(PAY "alice" "bob" 10)
          ,(PAY "alice" "carl" 1)] }] )

(expect-failure
 "Payment should fail on different sender"
 "not installed"
 (pay "dave" "bob" 6))


(expect-failure
 "Payment should fail on different receiver"
 "not installed"
 (pay "alice" "dave" 6))

(expect-failure
 "Payment should fail with too-high balance"
 "sufficient balance"
 (pay "alice" "bob" 11))

(expect
 "Success on first pmt" 6
 (pay "alice" "bob" 6))

(expect-failure
 "2nd payment should fail with too-high balance"
 "sufficient balance"
 (pay "alice" "bob" 5))

(expect
 "Success on second pmt" 4
 (pay "alice" "bob" 4))

(expect-failure
 "3rd payment should fail with too-high balance"
 "sufficient balance"
 (pay "alice" "bob" 1))

(expect
 "Payment to carl succeeds" 1
 (pay "alice" "carl" 1))

(expect-failure
 "2nd payment to carl fails"
 (pay "alice" "bob" 1))

(expect-failure
 "module admin fails without cap"
 "not installed"
 (pay-admin "bob" 10))

(env-sigs [{ "key": "dummy",
          "caps": [(PAY_ADMIN "bob" 10)] }])

(expect-failure
 "module admin fails on diff receiver"
 "not installed"
 (pay-admin "dave" 10))

(expect-failure
 "module admin fails on too-big balance"
 "sufficient balance"
 (pay-admin "bob" 12))

(expect
 "module admin succeeds"
 6
 (pay-admin "bob" 6))

(expect-failure
 "module admin fails on balance exceed"
 "sufficient balance"
 (pay-admin "bob" 5))

(expect
 "module admin balance succeeds"
 4
 (pay-admin "bob" 4))

(expect-failure
 "module admin fails on exhausted balance"
 "sufficient balance"
 (pay-admin "bob" 1))

;; make sure different arity caps can play nice

(env-sigs
 [{ "key": "carl",
 "caps": [(O)
         ,(PAY_ADMIN "alice" 10)
         ,(PAY "carl" "alice" 1)] }])
(env-data { "carl": ["carl"] })

(expect
 "module admin alice succeeds"
 1
 (pay-admin "alice" 1))

(expect
 "carl pay alice succeeds"
 1
 (pay "carl" "alice" 1))

(commit-tx)

(begin-tx)

(interface mgd-iface
  (defcap C:bool (id:string) @managed id C-mgr)
  (defschema c-schema
    id:string)
  (defun C-mgr:string
      (m:string r:string))
  )
(env-keys ["a"])
(env-data { "a": ["a"] })
(define-keyset 'a (read-keyset 'a))
(module mgd-mod G
  (defcap G () true)
  (implements mgd-iface)
  (defcap C:bool (id:string) @managed id C-mgr
    (enforce-keyset id))
  (defun C-mgr:string
      (m:string r:string) m)

  (defcap D (allow:bool) @managed allow D-mgr (enforce allow "allowed"))
  (defun D-mgr (m r) m)
  (defun acquireD (allowed:bool) (with-capability (D allowed) true))
  )

(expect
 "can install cap specified in interface"
 "Installed capability"
 (install-capability (C "a")))

(expect-failure
 "D not acquirable without install"
 (acquireD true))

(expect-failure
 "test install enforces capability test"
 (test-capability (D false)))

(expect
 "test install succeeds"
 "Capability installed"
 (test-capability (D true)))

(expect
 "D acquirable post-install"
 true
 (acquireD true))


;; test autonomous and sig-scoped
(commit-tx)
(begin-tx)


(module cap-install-test G
  (defcap G () true)

  (defschema sch guard:guard)
  (deftable tbl:{sch})

  (defcap C (id:string param:integer flag:bool)
    @managed flag C-mgr
    (enforce-guard (at 'guard (read tbl id))))
  (defun C-mgr (m r) m)

  (defun go (id param)
    (with-capability (C id param true) "success"))

  (defun setup (id guard)
    (insert tbl id { 'guard: guard }))

  )

(create-table tbl)

(module auto-cap-mod G
  (defcap G () (enforce false "no admin"))
  (defconst AUTO_ID "auto-cap-mod")
  (defun setup-auto ()
    (cap-install-test.setup AUTO_ID (create-module-guard "m")))
  (defun go-auto ()
    "make call in-module to allow module guard to pass"
    (go AUTO_ID 0))
  )

;; setup autonomous account
(setup-auto)
;; setup alice account
(env-data { "alice": ["alice"], "bob": ["bob"] })
(setup "alice" (read-keyset 'alice))
(setup "bob" (read-keyset 'bob))

(commit-tx)
(begin-tx)
(use auto-cap-mod)
(use cap-install-test)

;; scenario: user signs but does not scope cap and not installed
(env-keys ["alice"])
(expect-failure
 "alice acquire fails with nothing installed"
 "not installed"
 (go "alice" 0))

;; scenario: autonomous call fails with no cap installed
(expect-failure
 "autonomous failure with nothing installed"
 "not installed"
 (go-auto))

;; scenario: alice signs with no scope, direct install fails to acquire.
(env-keys ["alice"])
(install-capability (C "alice" 0 true))
(expect-failure
 "Autonomous install on unscoped user sig cannot acquire"
 "Keyset failure"
 (go "alice" 0))

;; scenario: autonomous install, but fails anyway because call is not from module.
(install-capability (C AUTO_ID 0 true))
(expect-failure
 "Install for a module-admin-guarded cap w/o module access cannot acquire"
 "no admin"
 (go AUTO_ID 0))

;; success if called from auto context
(expect
 "Install for a module-admin-guarded cap w/ module access acquires."
 "success"
 (go-auto))

;; scenario: bob installs with sig and succeeds
(env-sigs [{"key": "bob", "caps": [(C "bob" 0 true)]}])
(expect
 "Bob succeeds with sig-scoped install"
 "success"
 (go "bob" 0))

;; scenario: attacker tries different-parameterized cap than on sig list, fails
(install-capability (C "bob" 1 true))
(expect-failure
 "Attack with different parameters than signature cap fails"
 "Keyset failure"
 (go "bob" 1))

(commit-tx)
(begin-tx)

;;; test empty caps after autonomous tx
;;;
(module test-empty-cap GOV
  (defcap GOV () true)

  (defcap GUARD (g)
    (enforce-guard (read-keyset g)))

  (defun enforce-cap (g)
    (with-capability (GUARD g)
      true))

  (defun enforce-wo-cap (g)
    (enforce-guard (read-keyset g)))
)

(env-data {"alice-keyset": ["alice"]})

;; scenario: alice signs empty caps for non-managed cap, works
(env-sigs [{ "key": "alice", "caps": []}])
(expect "empty works with bare keyset read"  true (enforce-wo-cap "alice-keyset"))
(expect "empty works with keyset read in guard"  true (enforce-wo-cap "alice-keyset"))

;; scenario: alice signs caps, only works in non-managed cap
(env-sigs [{ "key": "alice", "caps": [(GUARD "alice-keyset")]}])
(expect "cap-scoped works with cap" true (enforce-cap "alice-keyset"))
(expect-failure "cap-scoped does not work without cap" "Keyset failure"
                (enforce-wo-cap "alice-keyset"))


(commit-tx)
(begin-tx)


;;; test auto-managed caps and iface matching

(interface auto-caps-iface
  (defcap CAP_A:bool (name:string) @managed)
  (defcap CAP_B:bool (name:string times:integer) @managed)
  )
(commit-tx)

(begin-tx)

(module auto-caps-mod GOV
  (implements auto-caps-iface)
  (defcap GOV () true)
  (defcap CAP_A:bool (name:string)
    @managed
    true)
  (defcap CAP_B:bool (name:string times:integer)
    @managed times capBMgr
    true)
  (defun capBMgr:integer (mgd:integer rqd:integer)
    (enforce (> mgd 0) "all done")
    (- mgd 1))
  (defun doA (name)
    (with-capability (CAP_A name) true))
  (defun doB (name times)
    (with-capability (CAP_B name times) true)))

(expect
 "auto managed installs"
 "Installed capability"
 (install-capability (CAP_A "auto-a")))

(expect
 "user managed unspecified installs"
 "Installed capability"
 (install-capability (CAP_B "auto-b" 2)))

(expect
 "auto managed succeeds"
 true
 (doA "auto-a"))

(expect
 "event emitted"
 [ {"module-hash": (at 'hash (describe-module 'auto-caps-mod))
    ,"name": "auto-caps-mod.CAP_A"
    ,"params": ["auto-a"]
    }]
 (env-events true))

(expect-failure
 "auto managed fails after first time"
 "Capability already fired"
 (doA "auto-a"))

(expect
 "user managed unspecified succeeds [2]"
 true
 (doB "auto-b" 2))
(expect
 "user managed unspecified succeeds [1]"
 true
 (doB "auto-b" 1))
(expect
 "events in order"
 [ {"module-hash": (at 'hash (describe-module 'auto-caps-mod))
    ,"name": "auto-caps-mod.CAP_B"
    ,"params": ["auto-b" 2]
    },
   {"module-hash": (at 'hash (describe-module 'auto-caps-mod))
    ,"name": "auto-caps-mod.CAP_B"
    ,"params": ["auto-b" 1]
    }
   ]
 (env-events true))
(expect-failure
 "user managed unspecified fails"
 "all done"
 (doB "auto-b" 0))


;; enforce-one-in-user-guard bug

(module enforce-one-in-user-guard-bug G
  (defcap G () true)

  (defun good () true)

  (defun enforce-one-in-guard (g)
    (enforce-one
     "should be able to enforce inner guard"
     [(enforce-guard g)]))

)

(expect
 "enforce-one in guard ok" true
 (enforce-guard
  (create-user-guard
   (enforce-one-in-guard
    (create-user-guard (good))))))

(env-exec-config ["OldReadOnlyBehavior"])
(expect-failure
 "preserve bugs: enforce-one in guard fails"
 "attempting db read in sys-only context"
 (enforce-guard
  (create-user-guard
   (enforce-one-in-guard
    (create-user-guard (good))))))


(env-events true) ;; clear events

(module events G
  (defcap G () true)
  (defcap TOP (msg:string)
    @event
    (compose-capability (COMPOSED 1))
    (compose-capability (MIDDLE)))

  (defcap MIDDLE ()
    (compose-capability (COMPOSED 1)) ;; shouldn't fire twice
    (compose-capability (COMPOSED 2)) ;; should fire
    )

  (defcap COMPOSED (i:integer)
    @event
    true)

  (defun go(msg:string)
    (with-capability (TOP msg)
      1))


  (defcap EV () @event (enforce false "always fail"))

  (defcap MGD (i:integer) @managed (enforce false "always fail"))

  (defcap NON () true)

  (defun emit-ev ()
    (emit-event (EV)))

  (defun emit-mgd ()
    (emit-event (MGD 1)))

  (defun emit-non-event ()
    (emit-event (NON)))

)

(go "hi")
(expect
 "nested events test"
 [ { "module-hash": (at 'hash (describe-module 'events))
     , "name": "events.COMPOSED"
     , "params": [1] }
   { "module-hash": (at 'hash (describe-module 'events))
     , "name": "events.COMPOSED"
     , "params": [2] }
   { "module-hash": (at 'hash (describe-module 'events))
     , "name": "events.TOP"
     , "params": ["hi"] }
   ]
 (env-events true))

(expect-failure
 "emit-event: must be in module"
 "Unable to resolve current calling module"
 (emit-event (EV)))

(expect-failure
 "emit-event: non-event"
 "must be managed or event defcap"
 (emit-non-event))

(expect
 "emit-event: event, does not evaluate"
 [{ "module-hash": (at 'hash (describe-module 'events))
  , "name": "events.EV", "params": [] }]
 (let ((a (emit-ev))) (env-events true)))

(expect
 "emit-event: managed, does not evaluate"
 [{ "module-hash": (at 'hash (describe-module 'events))
  , "name": "events.MGD", "params": [1] }]
 (let ((a (emit-mgd))) (env-events true)))

(module recursive_caps g
  (defcap g () true)
  (defcap FOO ()
    (compose-capability (BAR)))
  (defcap BAR ()
    (compose-capability (BAZ)))
  (defcap BAZ () true)
  (defun go-recursive-caps ()
    (with-capability (FOO)
      (require-capability (BAZ))
    )))

(go-recursive-caps) ;; Run recursive cap acquisition

;;
;; capability guards
;;

(module cap-guards g
  (defschema cg-schema g:guard)
  (deftable cg-tbl:{cg-schema})
  (defcap g () true)
  (defcap CAP1 (n:string) true)
  (defun test-cap-guard (n:string m:string)
    (with-capability (CAP1 n)
      (enforce-guard (create-capability-guard (CAP1 m)))))
  (defpact cg-pact (kw:string kr:string n:string m:string)
    (step (write cg-tbl kw { 'g: (create-capability-pact-guard (CAP1 m)) }))
    (step
     (with-read cg-tbl kr { 'g := cg }
      (with-capability (CAP1 n) (enforce-guard cg))))
  )
)
(create-table cg-tbl)

(expect
 "cap guard succeeds"
 true
 (test-cap-guard "A" "A"))

(expect-failure
 "cap guard fails on wrong cap"
 "Capability not acquired"
 (test-cap-guard "A" "B"))

(env-hash (hash 1))

(cg-pact 'k1 'k1 "C" "C")
(expect
 "cap pact guard succeeds"
 true
 (continue-pact 1))

(pact-state true)
(env-hash (hash 2))

(cg-pact 'k2 'k2 "D" "E")
(expect-failure
 "cap pact guard fails on wrong cap"
 "Capability not acquired"
 (continue-pact 1))

(pact-state true)
(env-hash (hash 3))

(cg-pact 'k3 'k1 "C" "C")
(expect-failure
 "cap pact guard fails on wrong pact id"
 "Invalid Pact ID"
 (continue-pact 1))
