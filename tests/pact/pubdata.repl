;; Chain public metadata should initialize with defaults
(expect "chain data chain id initializes with \"\"" "" (at "chain-id" (chain-data)))
(expect "chain data block height initializes with 0" 0 (at "block-height" (chain-data)))
(expect "chain data block time id initializes with 0" 0 (at "block-time" (chain-data)))
(expect "chain data sender initializes with \"\"" "" (at "sender" (chain-data)))
(expect "chain data gas limit initializes with 0" 0 (at "gas-limit" (chain-data)))
(expect "chain data gas price initializes with 0.0" 0.0 (at "gas-price" (chain-data)))

;; Chain public metadata should reflect updates
(env-chain-data { "chain-id": "Testnet00/2", "block-height": 20 })
(expect "chain data chain id reflects updated value" "Testnet00/2" (at "chain-id" (chain-data)))
(expect "chain data block height reflects updated value" 20 (at "block-height" (chain-data)))

;; show that updates are granular
(env-chain-data { "sender": "squawk" })
(expect "chain data sender reflects updated value" "squawk" (at "sender" (chain-data)))

;; show that updates are cumulative
(expect "chain data chain id reflects updated value" "Testnet00/2" (at "chain-id" (chain-data)))
(expect "chain data block height reflects updated value" 20 (at "block-height" (chain-data)))

;; Show failure on improper keys
(expect-failure "chain data should fail to update when wrong key is specified" (env-chain-data { "foo": 8 }))

;; Show failure on wrongly-typed keys
(expect-failure "chain data should fail for wrongly-typed keys" (env-chain-data { "chain-id": 0.0 }))

;; Show failure on duplicate keys
(expect-failure "chain data should not accept duplicate updates" (env-chain-data { "chain-id": "Testnet00/1", "chain-id:": "Testnet00/2" }))
