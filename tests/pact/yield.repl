(begin-tx)

(define-keyset 'k (sig-keyset))

(module yieldtest 'k

  "Define one test: 'tester' executes a single-chain pact and ensures rollbacks \
  \and step behavior works properly."

  (defschema schema-a a-result:string)

  (defpact tester (name)
    (step-with-rollback
     "A"
     (let*
         ((nameA (+ name "->A"))
          (r:object{schema-a} { "a-result": nameA }))

       (yield r)
       nameA)

     "rollback-a")

    (step "B"
      (resume { "a-result" := ar }
          (+ ar "->B")))
    )

  (defpact endorsement-test (name)
    (step-with-rollback
     "A"
     (let*
         ((nameA (+ name "->A"))
          (r:object{schema-a} { "a-result": nameA }))

       (yield r "1")
       nameA)

     "rollback-a")

    (step "B"
      (resume { "a-result" := ar }
          (+ ar "->B")))
    )
)

(commit-tx)

(begin-tx)
(use yieldtest)

(env-entity "B")
(env-hash (hash "stu-pact-id"))
(tester "stu")
(expect "step 0 skips B" false (at "executed" (pact-state true)))

(env-entity "A")
(expect "step 0 executes" "stu->A" (tester "stu"))
;; set resume for step 1
(env-entity "B")
(expect "step 1 executes" "stu->A->B" (continue-pact 1))

;; test 1 skips A
(pact-state true)
(tester "stu")
(env-entity "A")
(continue-pact 1)
(expect "step 1 skips A" false (at "executed" (pact-state)))

;; test rollback
(pact-state true)
(tester "stu")
(expect "step 0 rollback executes" "rollback-a" (continue-pact 0 true))

;; test no rollback for B
(pact-state true)
(tester "stu")
(env-entity "B")
(continue-pact 0 true)
(expect "step 0 rollback skips B" false (at "executed" (pact-state)))

(commit-tx)

;; test overwriting yield with continue-pact
(begin-tx)

(use yieldtest)
(env-hash (hash "stu-pact-id"))
(env-entity "A")
(expect "step 0 executes" "stu->A" (tester "stu"))

(env-entity "B")
(expect "step 1 executes with new yield value"
	"someRandomStr->B"
	(continue-pact 1 false (hash "stu-pact-id") {"a-result": "someRandomStr"}))

(commit-tx)
(begin-tx)

(use yieldtest)

;; set chain id to something sane
(env-chain-data { "chain-id": "0" })
(env-hash (hash "emily-pact-id"))

;; expect successful output which primes the yiel
(env-entity "A")
(expect "step 0 executes" "emily->A" (endorsement-test "emily"))

;; Expect failure since we are on chain "0", endorsement is set for "1"
;;(expect-failure "resume fails on wrong chain id" (continue-pact 1))

;; mock spv (switches chain id to designated chain id)
(mock-spv "cont-proof" "1")
(env-entity "B")
(expect "resume succeeds on correct chain id" "emily->A->B" (continue-pact 1))
(commit-tx)

(begin-tx)

(use yieldtest)

;; set chain id to something sane
(env-chain-data { "chain-id": "0" })
(env-hash (hash "emily-pact-id"))

;; expect successful output which primes the yiel
(env-entity "A")
(expect "step 0 executes" "emily->A" (endorsement-test "emily"))

(env-entity "B")
;; overwrite yield by supplying new object
(expect "step 1 executes with new yield value"
	"someRandomStr->B"
	(continue-pact 1 false (hash "emily-pact-id") {"a-result": "someRandomStr"}))
