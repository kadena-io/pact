(begin-tx)
(env-exec-config ["DisablePact44"])
(define-keyset 'k (sig-keyset))

(module yieldtest 'k

  "Define two tests: 'tester' executes a single-chain pact and ensures rollbacks \
  \and 'cross-chain' executes a cross-chain pact and step behavior works         \
  \properly."

  (defschema schema-a a-result:string)

  (defpact tester (name)
    (step-with-rollback
     "A"
     (let*
         ((nameA (+ name "->A"))
          (r:object{schema-a} { "a-result": nameA }))

       (yield r)
       nameA)

     "rollback-a")

    (step "B"
      (resume { "a-result" := ar }
          (+ ar "->B")))
    )


  (defpact cross-chain (name)
    (step
     (let*
         ((nameA (+ name "->A"))
          (r:object{schema-a} { "a-result": nameA }))

       (yield r "1")
       nameA))

    (step
     (resume { "a-result" := ar }
             (+ ar "->B")))
    )
)

(commit-tx)

(begin-tx)
(use yieldtest)

(env-entity "B")
(env-hash (hash "stu-pact-id"))
(tester "stu")
(expect "step 0 skips B" false (at "executed" (pact-state true)))

(env-entity "A")
(expect "step 0 executes" "stu->A" (tester "stu"))
;; set resume for step 1
(env-entity "B")
(expect "step 1 executes" "stu->A->B" (continue-pact 1))

;; test 1 skips A
(pact-state true)
(tester "stu")
(env-entity "A")
(continue-pact 1)
(expect "step 1 skips A" false (at "executed" (pact-state)))

;; test rollback
(pact-state true)
(tester "stu")
(expect "step 0 rollback executes" "rollback-a" (continue-pact 0 true))

;; test no rollback for B
(pact-state true)
(tester "stu")
(env-entity "B")
(continue-pact 0 true)
(expect "step 0 rollback skips B" false (at "executed" (pact-state)))

(commit-tx)

;; test overwriting yield with continue-pact
(begin-tx)

(use yieldtest)
(env-hash (hash "stu-pact-id"))
(env-entity "A")
(expect "step 0 executes" "stu->A" (tester "stu"))

(env-entity "B")
(expect "step 1 executes with new yield value"
	"someRandomStr->B"
	(continue-pact 1 false (hash "stu-pact-id") {"a-result": "someRandomStr"}))

(commit-tx)
(begin-tx)

(use yieldtest)

;; set chain id to something sane
(env-chain-data { "chain-id": "0" })
(env-hash (hash "emily-pact-id"))

;; expect successful output which primes the yiel
(expect "step 0 executes" "emily->A" (cross-chain "emily"))

;; check events
(expect "step 0 events"
 [{"module-hash": "W8fkhmdNHyXDdKKUnp4pgNsG1QWosPELoH7p28I9XPY"
   ,"name": "pact.X_YIELD"
   ,"params": ["1" "yieldtest.cross-chain" ["emily"]]}]
 (env-events true))

;; Expect failure since we are on chain "0", endorsement is set for "1"
(expect-failure "resume fails on wrong chain id" (continue-pact 1))

;; mock spv (switches chain id to designated chain id)
(env-chain-data { "chain-id" : "1" })
(expect "resume succeeds on correct chain id" "emily->A->B" (continue-pact 1))

;; check events
(expect "step 1 events"
 [{"module-hash": "W8fkhmdNHyXDdKKUnp4pgNsG1QWosPELoH7p28I9XPY"
    ,"name": "pact.X_RESUME"
    ,"params": ["0" "yieldtest.cross-chain" ["emily"]]}]
 (env-events true))

(pact-state true)

;; set chain id to something sane
(env-chain-data { "chain-id": "0" })
(env-hash (hash "emily-pact-id"))
;; disable pact events
(env-exec-config ["DisablePact40"])

;; expect successful output which primes the yield
(expect "step 0 executes" "emily->A" (cross-chain "emily"))
(expect "pact events disabled"
 []
 (env-events true))

;; overwrite yield by supplying new object fails on wrong chain
(expect-failure "step 1 fails to execute on wrong chain with new yield value"
	(continue-pact 1 false (hash "emily-pact-id") {"a-result": "someRandomStr"}))

;; overwrite yield works when correct chain-id is set
(env-chain-data { "chain-id" : "1" })
(expect "step 1 executes on correct chain with new yield value" "someRandomStr->B"
	(continue-pact 1 false (hash "emily-pact-id") {"a-result": "someRandomStr"}))
