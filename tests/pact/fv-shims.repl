(define-namespace 'test (sig-keyset) (sig-keyset))
(namespace 'test)

(interface iface
  (defun op:integer ()))

(interface iface2
  (defpact good:string ()))

(module impl g
  (implements iface)
  (defcap g () true)
  (defun op:integer () 1))

(module testmod g

  @model
  [
   ;; need at least some property to kick off fv
   (property (= 1 1))
  ]

  (defcap g () true)

  (defschema sch
    i:integer
    ;; exercise modref type coercion in schemas
    m:module{iface})

  (deftable tbl:{sch})

  (defschema test-schema
    "test schema"
    guard:string)

  (deftable test-table:{test-schema})

  (defcap CAP () @event true)

  (defun alist:[integer] () [ 1 2 ])

  ;; make sure verification works for
  ;; module references
  (defpact nested-modref-pact-1:string (m1:module{iface2})
    (step
      (+ (m1::good) "-nested")
      )
    (step
      (+ (continue (m1::good)) "-nested")
      )
    (step
      (+ (continue (m1::good)) "-nested")
      )
  )

  ;; test principal create/validate for
  ;; coverage
  (defun both-guard (ks1 ks2)
    (enforce-keyset ks1)
    (enforce-keyset ks2))

  (defun create-principal-test ()
    (insert test-table "user"
      { "guard":
          (create-principal
            (create-user-guard
             (both-guard
               (read-keyset 'ks1)
               (read-keyset 'ks2)
              )))
      }))

  (defun validate-principal-test ()
    (validate-principal
     (create-user-guard
      (both-guard
        (read-keyset 'ks1)
        (read-keyset 'ks2)))
     (create-principal
      (create-user-guard
      (both-guard
        (read-keyset 'ks1)
        (read-keyset 'ks2))))
     ))


  (defun fun (m:module{iface})
    @doc "Exercise FV shims and coercions. Modref arg coerced to string."
    ;; dynamic ref
    (m::op)
    ;; unsupported natives
    (keys tbl)
    (is-charset CHARSET_ASCII "abc")
    (install-capability (CAP))
    (emit-event (CAP))
    (concat ["a" "b"])
    (format "dynamic list {}" (alist))
    (enumerate 1 10)
    (enumerate 1 10 2)
    (tx-hash)
    (str-to-list "abc")
    (int-to-str 16 65535)
    (distinct [1 2 2 3])
    (diff-time
     (time "2021-01-01T00:00:00Z")
     (time "2021-01-01T00:00:00Z"))
  )

)

(env-dynref iface impl)
(verify "test.testmod")
