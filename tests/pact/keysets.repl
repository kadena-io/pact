(begin-tx)
(env-exec-config ["DisablePact44"])
(env-data { "kall": ["a" "b" "c"] })
(define-keyset "k" (sig-keyset))
(define-keyset 'kall (read-keyset "kall"))
(module keysets "k"
  (defschema sch value:bool)
  (deftable tbl:{sch})
  (defun keys-3 (count matched) (>= matched 3))
  (defun test-all ()
    (enforce-keyset (read-keyset "kall")))
  (defun test-any ()
    (enforce-keyset (read-keyset "kany")))
  (defun test-2 ()
    (enforce-keyset (read-keyset "k2")))
  (defun test-impure-pred ()
    (enforce-keyset (read-keyset "impure")))

  (defun impure () (insert tbl "hi" { "value": true }) true)

  (defun test-impure-enforce ()
    (enforce (impure) "cannot impure enforce"))

  (defun test-enforceks-in-enforce ()
    (enforce (enforce-keyset 'kall) "Fails with keyset"))

  (defun test-enforce-one ()
    (enforce-one "Should work" [(enforce false "should pass this") (enforce-keyset 'kall)]))

  (defun test-enforce-one-fail ()
    (enforce-one "Should fail" [(enforce false "should pass this") (enforce false "should fail this")]))

  )
(commit-tx)

(env-data
 { "kall": ["a" "b" "c"]
 , "kany": { "keys": ["a" "b" "c"], "pred": "keys-any" }
   , "k2": { "keys": ["a" "b" "c"], "pred": "keys-2" }
     , "qualified": {"keys": ["a" "b" "c" "d"], "pred": "keysets.keys-3" }
     , "impure": {"keys": [], "pred": "impure" }
       })

(env-keys ["a" "b" "c"])
(expect "qualified keys-3 succeeds on 3" true
        (enforce-keyset (read-keyset "qualified")))

(use keysets)

(env-keys [])
(expect-failure "all fails on none" (test-all))
(expect-failure "any fails on none" (test-any))
(expect-failure "2 fails on none" (test-2))
(env-keys ["a"])
(expect-failure "all fails on 1" (test-all))
(expect "any succeeds on 1" true (test-any))
(expect-failure "2 fails on 1" (test-2))
(env-keys ["a" "BAD"])
(expect-failure "all fails on 1+bad" (test-all))
(expect "any succeeds on 1+bad" true (test-any))
(expect-failure "2 fails on 1+bad" (test-2))
(env-keys ["a" "b"])
(expect-failure "all fails on 2" (test-all))
(expect "any succeeds on 2" true (test-any))
(expect "2 succeeds on 2" true (test-2))
(env-keys ["a" "b" "BAD"])
(expect-failure "all fails on 2+bad" (test-all))
(expect "any succeeds on 2+bad" true (test-any))
(expect "2 succeeds on 2+bad" true (test-2))
(env-keys ["a" "b" "c"])
(expect "all succeeds on 3" true (test-all))
(expect "any succeeds on 3" true (test-any))
(expect "2 succeeds on 3" true (test-2))

(expect-failure "impure keyset pred should blow up" (test-impure-pred))

(expect-failure "impure enforce should blow up" (test-impure-enforce))

(expect "permit enforce-keyset inside of enforce" true (test-enforceks-in-enforce))

(expect "test enforce-one, keyset read in enforce-one ok" true (test-enforce-one))

(expect-failure "test enforce-one all fail" (test-enforce-one-fail))

;; test keyset redefinition

(begin-tx)
(env-data { "rotate-me": ["a"]})
(env-keys ["b"])
(define-keyset 'rotate-me (read-keyset "rotate-me"))
(commit-tx)

;; should not be able to rotate without old keys

(begin-tx)
(env-keys ["b"])
(env-data { "rotate-me2": ["b"]})
(expect-failure "should not be able to rotate without satisfying old keyset"
  (define-keyset 'rotate-me (read-keyset "rotate-me2"))
)
(commit-tx)

;; should be able to rotate with old keys

(begin-tx)
(env-keys ["a"])
(env-data { "rotate-me3": ["c"] })
(define-keyset 'rotate-me (read-keyset "rotate-me3"))
(commit-tx)

;; test that keyset actually updated

(env-keys ["c"])
(enforce-keyset 'rotate-me)

;; test that rollback doesn't change keyset

(begin-tx)
(env-keys ["c"])
(env-data { "rotate-me4": ["a"]})
(define-keyset 'rotate-me (read-keyset "rotate-me4"))
(rollback-tx)

;; c should still work after rollback

(env-keys ["c"])
(enforce-keyset 'rotate-me)

(begin-tx)


;;; test caps

(env-data { "a": ["a"], "ab": { "keys": ["a","b"], "pred": "keys-any" } })

(module sig-caps G
  (defcap G () true)

  (defconst KEYSET_A (read-keyset "a"))
  (defconst KEYSET_AB (read-keyset "ab"))

  ;; params 'x' and 'y' intentionally ignored, just for sig scoping
  (defcap A (x:string y:bool)
    (enforce-keyset KEYSET_A))

  (defcap AB ()
    (enforce-keyset KEYSET_AB))

  (defun run-A (x:string y:bool)
    (with-capability (A x y) true))

  (defun run-AB ()
    (with-capability (AB) true))

  (defcap M (a:integer) @managed a M_mgr
    (enforce-keyset KEYSET_A))

  (defun M_mgr (m r) m)

  (defcap O ()
    (enforce-keyset KEYSET_A))

  )

(env-keys ["a"])
(expect "A succeeds with unscoped sig" true
        (run-A "foo" false))
(expect "AB succeeds with unscoped A sig" true
        (run-AB))

(env-sigs [{ 'key: "a", 'caps: [(A "bar" true)] },
           { 'key: "b", 'caps: [(A "foo" false)] }])

(expect-failure "a not in scope for (A foo false) cap"
                (run-A "foo" false))
(expect-failure "b not in scope for AB cap"
                (run-AB))

(env-sigs [{ 'key: "a", 'caps: [(A "bar" true),(AB)] }])

(expect "A succeeds with a in scope" true
        (run-A "bar" true))
(expect "AB succeeds with a in scope" true
        (run-AB))

(env-sigs [{ 'key: "a", 'caps: [(M 1)] }])
;; env-sigs does NOT install managed caps like Intepreter does
(expect
 "Managed install works with scoped keyset"
 "Capability installed"
 (test-capability (M 1)))

(expect-failure
 "O not in scope, managed M shouldn't allow it to pass"
 "Keyset failure"
 (test-capability (O)))

;; test computed key value
(let ((a "a"))
  (env-sigs [{ 'key: a, 'caps: [(M 1),(O)] }]))

(expect
 "Scoped acquire of O succeeds"
 "Capability acquired"
 (test-capability (O)))

;;
;; keyset formats
;;

(env-exec-config ["EnforceKeyFormats"])
(env-data
 { 'bad: ['foo]
 , 'short: ["12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975"]
 , 'long: ["12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975eaea"]
 , 'badchars: ["x2440d374865bdf0a3349634a70 1317fc279e7e13db9!f2199ac5e7378975ea"]
 , 'ucase:  ["12440D374865BDF0A3349634A70D1317FC279E7E13DB98F2199AC5E7378975EA"]
 , 'good:  ["12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975ea"]
 , 'mixed: ['foo "12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975ea"]
 , 'good2: ["12440d374865bdf0a3349634a70d1317fc279e7e13db98f2199ac5e7378975ea"
            "fdd198807260fa07b86f97a918ff7fe3542d98b9ca41a76f509e886dba3ae177"]

 })
(expect-failure
 "enforce kadena key format with flag: fail single"
 "Invalid keyset"
 (read-keyset 'bad))
(expect-failure
 "enforce kadena key format with flag: fail short"
 "Invalid keyset"
 (read-keyset 'short))
(expect-failure
 "enforce kadena key format with flag: fail long"
 "Invalid keyset"
 (read-keyset 'long))
(expect-failure
 "enforce kadena key format with flag: fail badchars"
 "Invalid keyset"
 (read-keyset 'badchars))
(expect-failure
 "enforce kadena key format with flag: fail uppercase"
 "Invalid keyset"
 (read-keyset 'ucase))

(expect-failure
 "enforce kadena key format with flag: fail one bad one good"
 "Invalid keyset"
 (read-keyset 'mixed))
(expect-that
 "enforce kadena key format with flag: success single"
 (constantly true)
 (read-keyset 'good))
(expect-that
 "enforce kadena key format with flag: success 2"
 (constantly true)
 (read-keyset 'good2))

(commit-tx)
(begin-tx)

;; wipe exec configs to test namespacing keysets
(env-exec-config [])

(env-data
  { "alice-keys" : ["alice"]
  , "bob-keys"   : ["bob"]
  , "alice.alice-keys": ["alice"]
  , "bob.bob-keys" : ["bob"]
  })

(env-keys ["alice", "bob"])

; Define namespace using a keyset guard
(define-namespace 'alice
  (read-keyset 'alice-keys)
  (read-keyset 'alice-keys))

(define-namespace 'bob
  (read-keyset 'bob-keys)
  (read-keyset 'bob-keys))

(expect-failure
  "Defining un-namespaced keys fails - env keys, name failure"
  "Cannot define a keyset outside of a namespace"
  (define-keyset 'alice-keys))

;; Show failure on lookup for keys
(expect-failure
  "Defining un-namespaced keys fails - actual keys, name failure"
  "Cannot define a keyset outside of a namespace"
  (define-keyset 'alice (read-keyset 'alice-keys)))

(expect-failure
  "Defining namespaced key fails - env keys, outside namespace"
  "Cannot define a keyset outside of a namespace"
  (define-keyset "alice.alice-keys"))

(namespace 'alice)
(expect
  "Defining namespaced key succeeds - env keys, in namespace"
  "Keyset defined"
  (define-keyset "alice.alice-keys"))

(expect-failure
  "Defining namespaced key fails - env keys, in wrong namespace"
  (define-keyset "bob.bob-keys"))

(define-keyset "alice.alice-keys")
(expect
  "Rotating keyset within namespace succeeds"
  "Keyset defined"
  (define-keyset "alice.alice-keys" (read-keyset 'bob-keys)))

(namespace 'bob)

(expect
  "Rotating keyset in wrong namespace succeeds if keys are present"
  "Keyset defined"
  (define-keyset "alice.alice-keys" (read-keyset 'bob-keys)))

(commit-tx)
(begin-tx)
;; parser tests

(env-data
  { "TEST <1>." : ["test"]
  , "" : ["test"]
  })
(env-keys ["test"])
(env-exec-config ['DisablePact44])

(expect
  "keyset definition parsing is permissive pre-pact-4.4 - define-keyset"
  "Keyset defined"
  (define-keyset "TEST <1>."))

(expect
  "keyset definition parsing is permissive pre-pact-4.4 - enforce-keyset"
  true
  (enforce-keyset "TEST <1>."))

(expect
  "keyset definition parsing is permissive pre-pact-4.4 - enforce-guard - keyset"
  true
  (enforce-guard (keyset-ref-guard "TEST <1>.")))

(expect
  "keyset name format is permissive pre-pact-4.4 - empty-keyset - define-keyset"
  "Keyset defined"
  (define-keyset ""))

(expect
  "keyset name format is permissive pre-pact-4.4 - empty-keyset - enforce-keyset"
  true
  (enforce-keyset ""))

(expect
  "keyset name format is permissive pre-pact-4.4 - empty keyset - enforce-guard - keyset"
  true
  (enforce-guard (keyset-ref-guard "")))

(commit-tx)
(begin-tx)

(env-data
  { "TEST <2>." : ["test"]
  , "" : ["test"]
  })
(env-keys ["test"])

;; clear env - post fork
(env-exec-config [])

(expect-failure
  "keyset definition parsing is not permissive post-pact-4.4 - define-keyset"
  "namespace"
  (define-keyset "TEST <2>."))

(expect-failure
  "keyset definition parsing is permissive post-pact-4.4 - enforce-guard - keyset ref"
  (enforce-guard (keyset-ref-guard "TEST <2>.")))

(namespace 'alice)
(expect-failure
  "keyset name format is not permissive post-pact-4.4 - empty-keyset - define-keyset"
  "incorrect keyset name format"
  (define-keyset ""))

(expect-failure
  "keyset name format is not permissive post-pact-4.4 - empty-keyset - enforce-keyset"
  "incorrect keyset name format"
  (enforce-keyset ""))

(expect-failure
  "keyset name format is not permissive post-pact-4.4 - empty keyset - enforce-guard - keyset ref"
  "incorrect keyset name format"
  (enforce-guard (keyset-ref-guard "")))

(expect
  "pre-defined keysets should be enforceable post-pact-4.4 - enforce-keyset"
  true
  (enforce-guard (keyset-ref-guard "TEST <1>.")))

;; admin/user guard differentiation in keyset

(commit-tx)
(begin-tx)
(env-exec-config ['DisablePact44])

(env-data
  { "admin": ["a"]
  , "user": ["u"]
  , "legacy": ["l"]
  , "legacy-rotated" : ["lr"]
  })

(env-keys ["l"])

(expect
  "legacy keysets are definable pre-44"
  "Keyset defined"
  (define-keyset "legacy" (read-keyset "legacy")))

(env-exec-config [])

(env-keys ["a", "u", "l"])

(expect
  "Legacy keysets are rotatable post-44"
  "Keyset defined"
  (define-keyset "legacy" (read-keyset "legacy-rotated")))

(define-namespace 'ns (read-keyset "user") (read-keyset "admin"))
(namespace 'ns)

(env-data
  { "ns.a": ["nsa"]
  })
(env-keys ["nsa"])

(expect-failure
  "Initial keyset definition fails when user guard not in scope"
  "Keyset failure (keys-all): [u]"
  (define-keyset "ns.a"))

(env-keys ["nsa", "u"])

(expect
  "Initial keyset definition succeeds when user guard in scope"
  "Keyset defined"
  (define-keyset "ns.a"))

(commit-tx)
(begin-tx)

(env-data
  { "ns.a": ["rotated"]
  })
(env-keys ["nsa", "rotated"])

(expect
  "Subsequent keyset rotations succeed without user guard, outside of namespace"
  "Keyset defined"
  (define-keyset "ns.a" (read-keyset "ns.a")))

(expect
  "Subsequent keyset rotations succeed without user guard - proof"
  "KeySet {keys: [rotated],pred: keys-all}"
  (format "{}" [(describe-keyset "ns.a")]))
