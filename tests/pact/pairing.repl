(module verifier G
  (defcap G () true)
  (defschema point-g1
    x:integer
    y:integer)
  ; Note points in g2 should be lists of at most length 2.
  ; We may want to enforce this by having this be twi
  (defschema point-g2
      x:[integer]
      y:[integer])

  (defschema proof
    proofA:object{point-g1}
    proofB:object{point-g2}
    proofC:object{point-g1})

  (defschema vk
    alfa1:object{point-g1}
    beta2:object{point-g2}
    gamma2:object{point-g2}
    delta2:object{point-g2}
    ic:[object{point-g1}])

  (defconst g1:object{point-g1}
    {'x:1, 'y:2})

  (defconst g2:object{point-g2}
    { 'x: [10857046999023057135944570762232829481370756359578518086990519993285655852781, 11559732032986387107991004021392285783925812861821192530917403151452391805634]
    , 'y: [8495653923123431417604973247489272438418190587263600148770280649306958101930, 4082367875863433681332203403145435568316851327593401208105741076214120093531]}
    )

  (defconst verifying-key:object{vk}
    { "alfa1":
      {'x: 20491192805390485299153009773594534940189261866228447918068658471970481763042,
       'y: 9383485363053290200918347156157836566562967994039712273449902621266178545958}
    , "beta2":
      {'x: [ 6375614351688725206403948262868962793625744043794305715222011528459656738731
           , 4252822878758300859123897981450591353533073413197771768651442665752259397132],
       'y: [ 10505242626370262277552901082094356697409835680220590971873171140371331206856
           , 21847035105528745403288232691147584728191162732299865338377159692350059136679]}
    , "gamma2":
    {'x: [ 10857046999023057135944570762232829481370756359578518086990519993285655852781
         , 11559732032986387107991004021392285783925812861821192530917403151452391805634],
     'y: [ 8495653923123431417604973247489272438418190587263600148770280649306958101930
         , 4082367875863433681332203403145435568316851327593401208105741076214120093531]}
    , "delta2":
    {'x: [ 16809031008450260338666218659281275370828342486329981864349494337906939571887
         , 14264224196899353800543367999525075765943744025449601386425105981609273614701],
     'y: [ 11890256881228627469373664690032300678627026600164400771388911741873652827176
         , 19575774426779481952987745556743272872528397589822551825491193352706249147828]}
    , "ic" :
      [ {'x:703628372913608924678229163876049246019207425954662225921071872483627421722, 'y: 12211995813319149655177018938770234811518560618061207904053494967754185713570}
      , {'x:245257359888022973124621370122921842349425470670527924595405093609495308747, 'y: 16424211039905278739428973076501641419102983596574674938829868639077765818142}
      , {'x:11110164462478062380497336442107420783806541677398299686522715666379498138472, 'y: 11772875621558518653532220728777759671658134704623077088185806874340215959359}
      , {'x:18074393405015025057791386123633410704735277649988577562824116025859630543119, 'y: 6512362579817099053449579131846840340322546772440905776424666285439665971742}
      , {'x:16324035526312367325456640773935782752062271159753322602146362004262088969135, 'y: 1959877669644004327327941905732419844609901799055849407390385762919820073782}
      , {'x:7958732978061398276873406529212832852529841068044035448997300713023105585033, 'y: 17143584956740843297694279539007817220119917091654840292522900244927912727369}
      , {'x:19790616331302654635046558077934057923437716290995001520546062733967158884432, 'y: 3876239317603061711287361903875372717184929107501147494633374979429019396018}
      , {'x:14590717951490734152256639590507997933809755442616725401381713035954026634761, 'y: 3225155507246149008951243692824143870155533409045696678069139586430835695226}
      , {'x:8650680088861200059927247719422818384661114515347998151694550511594524540419, 'y: 9638849577460518420520485529873913372767621068985215869067476349645606505077}
      , {'x:17562317824746836410714834945198951796768727084595092618069846988441315688042, 'y: 19452027031432595136507137552742780122072574021124781097949079775870562190348}
      , {'x:13182231104070542193327121010898638946743037034726286337778578885258172200370, 'y: 757187892995880849330492963674577612574015215504544964795700288326850257327}
      , {'x:14409932519884296032513716882778643894210345146972579810764887578771580357222, 'y: 814882272533738805340475214361663264998713952212684412413716253117631329790}
      , {'x:12509202143372575765947197406153125630356821791569394199509048702081149394252, 'y: 7737627039987972603153686057063377754848525136672116479087023797531609007397}
      , {'x:8407744049840718757455802166031970590203865445336729285031156887247294225651, 'y: 188049909694651097938181392474312752814356026969638293041076738773396096245}
      , {'x:334110586971536499255771782557320020258112908015957001506636732710862874984, 'y: 16580656581000952485971124280378233725304032835996723142898957560222784358519}
      , {'x:7727226277603419079704813924510379012883865378360151539308685989224075286070, 'y: 12912566309035429310049884735227185094569540217854933912859497659097301533657}
      , {'x:7681998061757907807252614087798324369243677279399770153101699113400315047554, 'y: 17481742211680301513436042099326808806059638013948490790089189392596297352637}
      , {'x:12569417065062182916398142101141299032330235062582799620914438471333638326044, 'y: 17523163572024314338870129158401181066960544407476643264775649919375538750903}
      , {'x:20366720006081427400904331708710783224493502999618856932501475384256136971442, 'y: 12984908039677137046692512896720328898650869058550411984382690230037651160819}
      , {'x:8428544296631560843765157901673529267885840366893744558046063361202851291828, 'y: 16289478447662297604149997612134385555472387391722487532370257859531844209269} ]
  })

  (defun negate-point-g1:object{point-g1} (point:object{point-g1})
    (bind point {"x" := x, "y" := y} {'x:x, 'y: (- y)}) )

  (defun verify-proof:bool
    (proof:object{proof}
    input:[integer])

    (enforce (= (+ 1 (length input)) (length (at 'ic verifying-key))) "input must be 1 below ic")

    (let*
      ((curve-inf {'x:0, 'y:0})
       (vk_x (fold (point-add "g1") curve-inf (zip (scalar-mult 'g1) (drop 1 (at 'ic verifying-key)) input)))
       (vk_x1 (point-add 'g1 vk_x (at 0 (at 'ic verifying-key))))
      )
    (pairing-check
      [(negate-point-g1 (at 'proofA proof)) (at 'alfa1 verifying-key) vk_x1 (at 'proofC proof)]
      [(at 'proofB proof) (at 'beta2 verifying-key) (at 'gamma2 verifying-key) (at 'delta2 verifying-key)]
      )
    )
    )
)


(expect "Pairing function check on test proof"
  true
  (let*
    ((p1 { 'x:17899149025429256540670503450603840524526341770363252849540840688855727610005
         , 'y:6794888886586012478899094699714874747255503821264355877996121220781692052981})
     (p2 { 'x:[4555160965165375385578562333880156835913586562443164694386914449127412126755, 16845220796436439159658389520454136502557317448502144055381480626643346396453]
         , 'y:[15740922883530394503972296892303076718862447518810507376564218784428077030254, 9794083499477745551885635852864140214811154513402172713835626845455029169909]})
     (p3 { 'x:2188339130061078784977610313576641337709587353412678866175084864819379744795
         , 'y:7363399164077520072321162032202323356331016580445157674442815097597932017402})
     (proof:object{proof} {'proofA:p1, 'proofB:p2, 'proofC:p3})
     (inp [293440811465879871736579011234159205259, 82735329187654304797954025540247337640, 1125899906842623, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1])
    )
    (verify-proof proof inp)
    )
  )

