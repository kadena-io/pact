name: Build and publish application binaries

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.10.7']
        cabal: ['3.4']
        os: ['ubuntu-18.04', 'ubuntu-20.04', 'macOS-latest' ]
        cabalcache: ['true']
        flags: ['+build-tool']
        include:
        - os: 'ubuntu-20.04'
          ghc: '8.10.7'
          cabal: '3.4'
          cabalcache: 'true'
          flags: '-build-tool'
        - os: 'ubuntu-20.04'
          ghc: '9.0.1'
          cabal: '3.4'
          cabalcache: 'true'
          flags: '+build-tool'
        # include:
        # - os: 'windows-latest'
        #   storepath: '--store-path=${HOME}/AppData/Roaming/cabal/store'

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.kadena_cabal_cache_aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.kadena_cabal_cache_aws_secret_access_key }}
      AWS_DEFAULT_REGION: us-east-1

      # Aritfacts
      ARTIFACT_BUCKET: kadena-cabal-cache
      BINFILE: pact.${{ matrix.ghc }}.${{ matrix.os }}.${{ github.sha }}.tar.gz

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Non Haskell dependencies
    - name: Install z3 (ubuntu-20.04)
      if: contains(matrix.os, 'ubuntu-20.04')
      run: |
        sudo apt-get update
        sudo apt-get install -y z3
    - name: Install z3 (ubuntu-18.04)
      if: contains(matrix.os, 'ubuntu-18.04')
      uses: pavpanchekha/setup-z3@0.2.0
      with:
        version: "4.8.10"
        architecture: "x64"
        distribution: "ubuntu-18.04"
    - name: Install z3 (macOS)
      if: contains(matrix.os, 'mac')
      uses: pavpanchekha/setup-z3@0.2.0
      with:
        version: "4.8.10"
        architecture: "x64"
        distribution: "osx-10.15.7"
    - name: Install non-Haskell dependencies (windows)
      if: contains(matrix.os, 'windows')
      run: choco install -y -r awscli

    # Haskell Setup
    - name: Install GHC and Cabal
      uses: haskell/actions/setup@v1.2
      with:
         ghc-version: ${{ matrix.ghc }}
         cabal-version: ${{ matrix.cabal }}
    - name: Confirm GHC and Cabal installation
      run: |
        ghc --version
        cabal --version
    - name: Setup PATHs (windows)
      if: "contains(matrix.os, 'windows')"
      shell: bash
      run: |
        echo "/c/ProgramData/chocolatey/lib/ghc/tools/ghc-${{ matrix.ghc }}/bin" >> $GITHUB_PATH
        echo "C:\\ProgramData\\chocolatey\\lib\\ghc\\tools\\ghc-${{ matrix.ghc }}\\bin" >> $GITHUB_PATH
        echo "/c/ProgramData/chocolatey/lib/cabal/tools/cabal-3.2.0.0" >> $GITHUB_PATH
        echo "C:\\ProgramData\\chocolatey\\lib\\cabal\\tools\\cabal-3.2.0.0" >> $GITHUB_PATH
        echo "/c/Users/runneradmin/AppData/Roaming/cabal/bin" >> $GITHUB_PATH
        echo "C:\\Users\\runneradmin\\AppData\\Roaming\\cabal\\bin" >> $GITHUB_PATH
        echo "/c/Program Files/Amazon/AWSCLI/bin" >> $GITHUB_PATH
        echo "C:\\Program Files\\Amazon\\AWSCLI\\bin" >> $GITHUB_PATH

        # these are needed for cabal-cache to work
        ln -s /c/ProgramData/chocolatey/lib/ghc/tools/ghc-${{ matrix.ghc }}/bin/ghc-pkg.exe /c/ProgramData/chocolatey/lib/ghc/tools/ghc-${{ matrix.ghc }}/bin/ghc-pkg-${{ matrix.ghc }}

    # Project Setup
    - name: Create cabal.project.local
      shell: bash
      run: |
        cat > cabal.project.local <<EOF
        documentation: False
        package pact
          tests: True
          benchmarks: True
          documentation: False
          optimization: 1
          flags: ${{ matrix.flags }}
        EOF
    - name: Extend cabal.project.local for GHC-9.0.1
      if: "startsWith(matrix.ghc, '9')"
      shell: bash
      run: |
        cat >> cabal.project.local <<EOF
        allow-newer: hashable:*
        package pact
          ghc-options: -Wwarn -Wunused-packages
        EOF
    - name: Add check for unused packages
      shell: bash
      if: "! startsWith(matrix.ghc, '8.6') && ! startsWith(matrix.ghc, 8.8)"
      run: |
        cat >> cabal.project.local <<EOF
        package pact
          ghc-options: -Wunused-packages
        EOF
    - name: Print cabal.project.local
      shell: bash
      run: cat cabal.project.local
    - uses: actions/cache@v2
      name: Cache dist-newstyle
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ matrix.os }}-${{ matrix.ghc }}-4-cabal

    # Build
    - name: Update package database
      shell: bash
      run: cabal update
    - name: Display outdated packages
      run: cabal outdated
    - name: Configure build
      run: |
        cabal build --dry-run
        cabal freeze
    - name: Sync from cabal cache
      if: matrix.cabalcache == 'true'
      uses: larskuhtz/cabal-cache-action@ecc751af6d31b3ed5a3b4aefdefd0ed6ef4cb414
      with:
        bucket: "kadena-cabal-cache"
        region: "us-east-1"
        folder: "${{ matrix.os }}"
        aws_access_key_id: "${{ secrets.kadena_cabal_cache_aws_access_key_id }}"
        aws_secret_access_key: "${{ secrets.kadena_cabal_cache_aws_secret_access_key }}"
    - name: Build dependencies
      shell: bash
      run: cabal build --only-dependencies
    - name: Build
      shell: bash
      run: cabal build
    - name: Test
      shell: bash
      run: cabal test +RTS -N
    - name: Benchmark
      shell: bash
      if: "!contains(matrix.flags, '-build-tool')"
      run: cabal bench

    # Publish Artifacts
    - name: Prepare artifacts
      if: "!contains(matrix.flags, '-build-tool')"
      shell: bash
      run: |
        export VER=$(grep '^version' pact.cabal | sed -e 's/.*: *//')
        mkdir -p dist-newstyle/artifacts/applications
        cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/pact-${VER}/x/pact/build/pact/pact dist-newstyle/artifacts/applications
    - name: Publish applications
      if: "!contains(matrix.flags, '-build-tool')"
      uses: actions/upload-artifact@v1
      with:
        name: pact-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: dist-newstyle/artifacts/applications

    # Publish to S3
    - name: Publish applications to S3
      if: "!contains(matrix.flags, '-build-tool') && !contains(matrix.os, 'windows')"
      shell: bash
      run: |
        tar -C ./dist-newstyle/artifacts/applications/ -czf $BINFILE '.'
        echo "created tar file: $BINFILE"
        ls $BINFILE
        aws s3 cp $BINFILE s3://$ARTIFACT_BUCKET/pact/
        echo "uploaded tar file to S3"
        aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=pact/$BINFILE --acl public-read
        echo "set public read permission"
